package covering

import (
	"testing"

	"github.com/peterstace/simplefeatures/geom"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestExternalCovering(t *testing.T) {
	for _, tc := range []struct {
		name     string
		wkt      string
		maxCells int
		expect   []CellID
	}{
		{
			name:     "whole map",
			wkt:      ZoomZeroCell.Geom().AsText(),
			maxCells: 20,
			expect: []CellID{
				0x8000000000000000,
			},
		},
		{
			name:     "single point",
			wkt:      "POINT(151.196 -33.866)",
			maxCells: 20,
			expect: []CellID{
				0xe9cbc175286024ee,
			},
		},
		{
			name:     "linestring",
			wkt:      "LINESTRING (151.17777883970012 -33.89915886674083, 151.17944876656372 -33.896744381970066, 151.1812802992535 -33.89571596954773, 151.18365051802806 -33.89334610240112, 151.18736745201534 -33.892183501988086, 151.19033022548223 -33.88941108320346, 151.19323913034145 -33.88766709618549, 151.19474745138047 -33.88458149334736)",
			maxCells: 20,
			expect: []CellID{
				0xe9cbc40fd8000000,
				0xe9cbc40fe8000000,
				0xe9cbc40ff8000000,
				0xe9cbc41360000000,
				0xe9cbc413a0000000,
				0xe9cbc413e0000000,
				0xe9cbc41620000000,
				0xe9cbc41858000000,
				0xe9cbc41878000000,
				0xe9cbc418e0000000,
				0xe9cbc41920000000,
				0xe9cbc41a18000000,
				0xe9cbc41a28000000,
				0xe9cbc41a38000000,
				0xe9cbc41a48000000,
				0xe9cbc41a88000000,
				0xe9cbc42508000000,
				0xe9cbc42518000000,
				0xe9cbc42548000000,
			},
		},
		{
			name:     "single cell includes neighbouring cells because they intersect the boundary",
			wkt:      XYZToCellID(123, 456, 10).Geom().AsText(),
			maxCells: 20,
			expect: []CellID{
				0x17a9df8000000000,
				0x17a9f60000000000,
				0x17a9fd8000000000,
				0x17a9ff8000000000,
				0x17ab558000000000,
				0x17ac8a8000000000,
				0x17ac8b8000000000,
				0x17ac8e8000000000,
				0x17ac8f8000000000,
				0x17ac9a8000000000,
				0x17aca80000000000, // original cell
				0x17acb08000000000,
				0x17acb28000000000,
				0x17acb88000000000,
				0x17acba8000000000,
				0x17ae008000000000,
				0x17ae018000000000,
				0x17ae048000000000,
				0x17ae058000000000,
				0x17ae108000000000,
			},
		},
		{
			name: "Australia",
			wkt: `MULTIPOLYGON(
				((115.12974936961064 -33.94746740383465, 116.89325344621824 -35.1773935246154, 123.54635525699587 -34.0334665647765, 125.01229427555933 -32.76504696519842, 130.8533264250692 -31.621205514074042, 133.3554878149327 -32.013812745097916, 135.59925229667363 -34.824810219542044, 140.15501878018097 -37.94107655667957, 143.29965711410927 -38.98670541298011, 145.99722125772973 -39.15763221685892, 149.89173421681983 -37.7629793608208, 153.28147327805465 -31.274083836016892, 153.19944941207405 -25.699910662918327, 142.40106983051436 -10.445759124437714, 140.49420368110157 -17.547905748173463, 135.53694091389116 -14.833465482045824, 136.88524622800003 -12.169310284547564, 130.56764876913473 -11.235979504388865, 129.25811634656884 -14.111505857716836, 129.55354736823062 -14.99121754617586, 126.93839179015254 -13.866803186408347, 125.14157328273859 -14.493436274092332, 121.13901156170527 -19.316348563404404, 113.74170321256048 -21.997856972782103, 113.47904014429406 -26.171395434387343, 115.84534035714637 -32.53204953697848, 115.12974936961064 -33.94746740383465)),
				((144.28919920677697 -40.77079688015533, 146.07335528591045 -43.71159773845069, 147.43011180353886 -43.616346924564745, 148.33034010300855 -40.908336071447536, 146.25199570018162 -41.090890980452386, 144.28919920677697 -40.77079688015533)))`,
			maxCells: 20,
			expect: []CellID{
				0xe258000000000000,
				0xe268000000000000,
				0xe278000000000000,
				0xe2e0000000000000,
				0xe320000000000000,
				0xe348000000000000,
				0xe368000000000000,
				0xe3a0000000000000,
				0xe3c8000000000000,
				0xe3e8000000000000,
				0xe838000000000000,
				0xe860000000000000,
				0xe8c8000000000000,
				0xe8d8000000000000,
				0xe920000000000000,
				0xe960000000000000,
				0xe9a0000000000000,
				0xe9e0000000000000,
				0xec28000000000000,
				0xec88000000000000,
			},
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			g, err := geom.UnmarshalWKT(tc.wkt)
			require.NoError(t, err)

			cov := ExteriorCovering(g, tc.maxCells)
			assert.ElementsMatch(t, tc.expect, cov)
		})
	}
}

func TestSearchRanges(t *testing.T) {
	for _, tc := range []struct {
		name    string
		cells   []CellID
		minZoom int
		expect  []CellRange
	}{
		{
			name:    "whole map",
			cells:   []CellID{ZoomZeroCell},
			minZoom: 0,
			expect: []CellRange{
				{0x0000000000000000, 0xffffffffffffffff},
			},
		},
		{
			name:    "single tile",
			cells:   []CellID{XYZToCellID(123, 456, 9)},
			minZoom: 0,
			expect: []CellRange{
				{0x5800000000000000, 0x5800000000000000},
				{0x5e00000000000000, 0x5e00000000000000},
				{0x5e80000000000000, 0x5e80000000000000},
				{0x5ea0000000000000, 0x5ea0000000000000},
				{0x5eb2000000000000, 0x5eb2000000000000},
				{0x5eb2800000000000, 0x5eb2bfffffffffff},
				{0x5eb8000000000000, 0x5eb8000000000000},
				{0x6000000000000000, 0x6000000000000000},
				{0x8000000000000000, 0x8000000000000000},
			},
		},
		{
			name:    "single tile with minZoom",
			cells:   []CellID{XYZToCellID(123, 456, 9)},
			minZoom: 5,
			expect: []CellRange{
				{0x5ea0000000000000, 0x5ea0000000000000},
				{0x5eb2000000000000, 0x5eb2000000000000},
				{0x5eb2800000000000, 0x5eb2bfffffffffff},
				{0x5eb8000000000000, 0x5eb8000000000000},
			},
		},
		{
			name: "multiple tiles, some contiguous",
			cells: []CellID{
				0xe280000000000000,
				0xe380000000000000,
				0xe880000000000000,
				0xe980000000000000,
				0xec80000000000000,
			},
			minZoom: 2,
			expect: []CellRange{
				{0xe200000000000000, 0xe3ffffffffffffff},
				{0xe800000000000000, 0xea00000000000000},
				{0xec00000000000000, 0xecffffffffffffff},
				{0xee00000000000000, 0xee00000000000000},
			},
		},
		{
			name: "multiple tiles, minZoom > tile zoom, some contiguous",
			cells: []CellID{
				0xe280000000000000,
				0xe380000000000000,
				0xe880000000000000,
				0xe980000000000000,
				0xec80000000000000,
			},
			minZoom: 5,
			expect: []CellRange{
				{0xe200000000000000, 0xe3ffffffffffffff},
				{0xe800000000000000, 0xe9ffffffffffffff},
				{0xec00000000000000, 0xecffffffffffffff},
			},
		},
	} {
		t.Run(tc.name, func(t *testing.T) {
			r := SearchRanges(tc.cells, tc.minZoom)
			assert.Equal(t, tc.expect, r)
		})
	}
}
